type Comment {
  comment: String
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [
        { name: "id", field: "post_id" }
        { name: "id", field: "post_id" }
      ]
    )
  post_id: ID
  username: String
}

type Post {
  body: String
  commentList: [Comment] @materializer(query: "getCommentUsingPost_id")
  created_at: DateTime
  id: ID!
  image: String
  post: Post
    @materializer(
      query: "getPost"
      arguments: [
        { name: "id", field: "subreddit_id" }
        { name: "id", field: "subreddit_id" }
      ]
    )
  postList: [Post] @materializer(query: "getPostUsingSubreddit_id")
  subreddit_id: ID
  title: String
  username: String
  voteList: [Vote] @materializer(query: "getVoteUsingPost_id")
}

type Subreddit {
  created_at: DateTime
  id: ID!
  topic: String
}

type Vote {
  created_at: DateTime
  id: ID!
  post: Post
    @materializer(
      query: "getPost"
      arguments: [
        { name: "id", field: "post_id" }
        { name: "id", field: "post_id" }
      ]
    )
  post_id: ID
  username: String
  voteup: Boolean
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getPost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  getCommentUsingPost_id(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."comment", T."created_at", T."id", T."post_id", T."username"
        FROM "public"."comment" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingSubreddit_id(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."image", T."subreddit_id", T."title", T."username"
        FROM "public"."post" T
        WHERE T."subreddit_id" = $1
      """
      configuration: "postgresql_config"
    )
  getVoteUsingPost_id(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."created_at", T."id", T."post_id", T."username", T."voteup"
        FROM "public"."vote" T
        WHERE T."post_id" = $1
      """
      configuration: "postgresql_config"
    )
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getSubreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  """
  Additions
  """
  getSubredditListByTopic(topic: String!): [Subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."topic", T."created_at", T."topic", T."id"
        FROM "public"."subreddit" T
        WHERE T."topic" = $1
      """
      configuration: "postgresql_config"
    )
  """
  End Additions
  """
  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertComment(
    post_id: ID!
    created_at: DateTime!
    comment: String!
    username: String!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    image: String!
    body: String!
    created_at: DateTime!
    subreddit_id: ID!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteSubreddit(id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    post_id: ID!
    created_at: DateTime!
    voteup: Boolean!
    username: String!
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
